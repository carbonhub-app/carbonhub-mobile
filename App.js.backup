import './global.css';
import 'react-native-gesture-handler';
import React, { useRef, useEffect, useState } from 'react';
import { LogBox, View, Text } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { ThemeProvider, useTheme } from './src/contexts/ThemeContext';
import HomeScreen from './src/screens/HomeScreen';
import CompanyDetailScreen from './src/screens/CompanyDetailScreen';

// Suppress navigation warnings during development
LogBox.ignoreLogs([
  'Couldn\'t find a navigation context',
  'Warning: Error: Couldn\'t find a navigation context',
  'Tried to register two views with the same name',
  'VirtualizedLists should never be nested',
]);

const Stack = createStackNavigator();

// Inner component that uses theme context
function ThemedAppStack() {
  const { theme, isDark } = useTheme();

  return (
    <>
      <StatusBar style={isDark ? 'light' : 'dark'} backgroundColor="#111827" />
      <Stack.Navigator
        initialRouteName="Home"
        screenOptions={{
          headerShown: false,
          gestureEnabled: true,
          animationEnabled: true,
          cardStyle: { backgroundColor: '#111827' },
        }}
      >
        <Stack.Screen
          name="Home"
          component={HomeScreen}
          options={{
            cardStyle: { backgroundColor: '#111827' },
          }}
        />
        <Stack.Screen
          name="CompanyDetail"
          component={CompanyDetailScreen}
          options={{
            gestureDirection: 'horizontal',
            cardStyle: { backgroundColor: '#111827' },
          }}
        />
      </Stack.Navigator>
    </>
  );
}

// Navigation wrapper component
const Navigation = () => {
  const navigationRef = useRef();
  const [isNavigationReady, setIsNavigationReady] = useState(false);

  useEffect(() => {
    // Cleanup function
    return () => {
      setIsNavigationReady(false);
    };
  }, []);

  return (
    <NavigationContainer
      ref={navigationRef}
      onReady={() => {
        console.log('NavigationContainer is ready');
        setIsNavigationReady(true);
      }}
      onStateChange={(state) => {
        // Optional: Log navigation state changes for debugging
        if (__DEV__) {
          console.log('Navigation state changed:', state);
        }
      }}
    >
      <ThemeProvider>
        <ThemedAppStack />
      </ThemeProvider>
    </NavigationContainer>
  );
};

export default function App() {
  return (
    <SafeAreaProvider>
      <Navigation />
    </SafeAreaProvider>
  );
}
